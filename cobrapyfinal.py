# -*- coding: utf-8 -*-
"""cobrapy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v-d97735_WoFUxXdhMZOKnDbOiMRNER0
"""

!pip install cobra

Q1

import cobra
# Load the GSMM model
model = cobra.io.read_sbml_model("/content/Ec_core_flux1.xml")
for metabolite in model.metabolites:
    print(metabolite.id,metabolite.name)

Q2

num_reactions = len(model.reactions)
num_genes = len(model.genes)
print("Number of reactions:", num_reactions)
print("Number of genes:", num_genes)

"""# q3

"""



import cobra

# Load the GSMM model
model = cobra.io.read_sbml_model("/content/Ec_core_flux1.xml")

# Add Ethylene Glycol (EG) as a metabolite in the extracellular compartment
EG_e = cobra.Metabolite(id="eg_e", compartment="e", name="Ethylene Glycol")
model.add_metabolites([EG_e])

# Add Ethylene Glycol (EG) as a metabolite in the intracellular compartment
EG_c = cobra.Metabolite(id="eg_c", compartment="c", name="Ethylene Glycol")
model.add_metabolites([EG_c])

# Add a reaction to synthesize extracellular EG from nothing (sink reaction)
EG_synth = cobra.Reaction(id="EG_synth", name="Synthesis of extracellular Ethylene Glycol")
EG_synth.add_metabolites({EG_e: 1.0})
EG_synth.lower_bound = 0
EG_synth.upper_bound = 1000
model.add_reactions([EG_synth])

# Add a transport reaction for EG from extracellular to intracellular compartment
EGtex = cobra.Reaction(id="EGtex", name="Ethylene Glycol transport to cytoplasm",
                       lower_bound=-1000, upper_bound=1000)
EGtex.add_metabolites({EG_e: -1.0, EG_c: 1.0})
model.add_reactions([EGtex])

# Add additional metabolites from the given pathway
GA_c = cobra.Metabolite(id="ga_c", compartment="c", name="Glycolaldehyde")
Glyc_c = cobra.Metabolite(id="glyc_c", compartment="c", name="Glycolate")
Glyox_c = cobra.Metabolite(id="glyox_c", compartment="c", name="Glyoxylate")
CO2_c = cobra.Metabolite(id="co2_c", compartment="c", name="Carbon Dioxide")

model.add_metabolites([GA_c, Glyc_c, Glyox_c, CO2_c])

# Add reactions based on the pathway

# FucOMut: Ethylene Glycol to Glycolaldehyde
FucOMut = cobra.Reaction(id="FucOMut", name="Ethylene Glycol to Glycolaldehyde")
model.add_reactions([FucOMut])
FucOMut.add_metabolites({EG_c: -1.0, "nad_c": -1.0, GA_c: 1.0, "nadh_c": 1.0, "h_c": 1.0})
FucOMut.lower_bound = 0
FucOMut.upper_bound = 1000

# AldA: Glycolaldehyde to Glycolate
AldA = cobra.Reaction(id="AldA", name="Glycolaldehyde to Glycolate")
model.add_reactions([AldA])
AldA.add_metabolites({GA_c: -1.0, Glyc_c: 1.0})
AldA.lower_bound = 0
AldA.upper_bound = 1000

# TarSA: Glycolate to Glyoxylate
TarSA = cobra.Reaction(id="TarSA", name="Glycolate to Glyoxylate")
model.add_reactions([TarSA])
TarSA.add_metabolites({Glyc_c: -1.0, Glyox_c: 1.0, CO2_c: 1.0})
TarSA.lower_bound = 0
TarSA.upper_bound = 1000

# Verify the additions
print(f"Metabolites: {[met.id for met in model.metabolites if 'eg_' in met.id or 'ga_' in met.id or 'glyc_' in met.id or 'glyox_' in met.id or 'co2_' in met.id]}")
print(f"Reactions: {[rxn.id for rxn in model.reactions if 'EG' in rxn.id or 'AldA' in rxn.id or 'TarSA' in rxn.id]}")



"""q4

"""

import cobra

# Load the GSMM model
model = cobra.io.read_sbml_model("/content/Ec_core_flux1.xml")

# Function to summarize the model
def summarize_model(model):
    return {
        "Metabolites": len(model.metabolites),
        "Reactions": len(model.reactions),
        "Genes": len(model.genes)
    }

# Summarize the model before adding EG pathway
summary_before = summarize_model(model)
print("Model Summary Before Adding EG Pathway:")
print(summary_before)

# Add Ethylene Glycol (EG) metabolites in extracellular and intracellular compartments
EG_e = cobra.Metabolite(id="EG_e", compartment="e", name="Ethylene Glycol")
EG_c = cobra.Metabolite(id="EG_c", compartment="c", name="Ethylene Glycol")
model.add_metabolites([EG_e, EG_c])

# Add a reaction to synthesize extracellular EG from nothing (sink reaction)
EG_synth = cobra.Reaction(id="EG_synth", name="Synthesis of extracellular Ethylene Glycol")
EG_synth.add_metabolites({EG_e: 1.0})
EG_synth.lower_bound = 0
EG_synth.upper_bound = 1000
model.add_reactions([EG_synth])

# Add a transport reaction for EG from extracellular to intracellular compartment
EGtex = cobra.Reaction(id="EGtex", name="Ethylene Glycol transport to cytoplasm", lower_bound=-1000, upper_bound=1000)
EGtex.add_metabolites({EG_e: -1.0, EG_c: 1.0})
model.add_reactions([EGtex])

# Add an exchange reaction for extracellular EG
EX_EG_e = cobra.Reaction(id="EX_EG_e", name="Exchange of extracellular Ethylene Glycol", lower_bound=-1000, upper_bound=1000)
EX_EG_e.add_metabolites({EG_e: -1.0})
model.add_reactions([EX_EG_e])

# Summarize the model after adding EG pathway
summary_after = summarize_model(model)
print("\nModel Summary After Adding EG Pathway:")
print(summary_after)

"""q5

fixed it
"""

# List of common carbon sources' uptake reactions
carbon_sources = ['EX_glc__D_e', 'EX_gal_e', 'EX_fru_e', 'EX_suc_e']

# Set their bounds to zero to stop their uptake
for source in carbon_sources:
    if source in model.reactions:
        model.reactions.get_by_id(source).lower_bound = 0
        model.reactions.get_by_id(source).upper_bound = 0

print("Uptake reactions of other carbon sources stopped.")

# Set the objective to biomass production
model.objective = model.reactions.get_by_id("Biomass_Ecoli_core_N__w_GAM_")

# Optimize the model
solution_biomass = model.optimize()
print("Objective set to biomass production:")
print(solution_biomass)


# Set the objective to Ethylene Glycol uptake
model.objective = 'EX_EG_e'

# Optimize the model
solution_eg_uptake = model.optimize()
print("Objective set to Ethylene Glycol uptake:")
print(solution_eg_uptake)

# Compare the results
print("Comparison of the results:")
print(f"Biomass objective value: {solution_biomass.objective_value}")
print(f"EG uptake objective value: {solution_eg_uptake.objective_value}")



print(model.reactions)

# Find the biomass reaction in the model
biomass_reaction = None
for reaction in model.reactions:
    if "ethylene glycol" in reaction.name.lower():
        biomass_reaction = reaction
        break

if biomass_reaction:
    model.objective = biomass_reaction
    print(reaction)
else:
    print("Biomass reaction not found in the model.")